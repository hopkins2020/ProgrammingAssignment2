m <- matrix()
View(m)
rm(m)
## Creates a special matrix object that can cache its inverse
makeCacheMatrix <- function( m = matrix() ) {
## Initialize the inverse property
i <- NULL
## Method to set the matrix
set <- function( matrix ) {
m <<- matrix
i <<- NULL
}
## Method the get the matrix
get <- function() {
## Return the matrix
m
}
## Method to set the inverse of the matrix
setInverse <- function(inverse) {
i <<- inverse
}
## Method to get the inverse of the matrix
getInverse <- function() {
## Return the inverse property
i
}
## Return a list of the methods
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Compute the inverse of the special matrix returned by "makeCacheMatrix"
## above. If the inverse has already been calculated (and the matrix has not
## changed), then the "cachesolve" should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
## Just return the inverse if its already set
if( !is.null(m) ) {
message("getting cached data")
return(m)
}
## Get the matrix from our object
data <- x$get()
## Calculate the inverse using matrix multiplication
m <- solve(data) %*% data
## Set the inverse to the object
x$setInverse(m)
## Return the matrix
m
}
View(makeCacheMatrix)
## makeCacheMatrix function creates a special matrix that can cashe its inverse.
makeCacheMatrix <- function(m = matrix()) {
#start the inverse property
i <- NULL
#1# set the matrix
set <- function( matrix ) {
m <<- matrix
i <<- NULL
}
#2# get the matrix
get <- function() {
m
}
#3# set the inverse of the matrix
setInverse <- function(inverse) {
i <<- inverse
}
#4# get the inverse of the matrix
getInverse <- function() {
i
}
#return a list of the previous functions #1:4#
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return the inversed matrix of "x"
m <- x$getInverse()
## an if statement to check if the inverse value is already calculated
if( !is.null(m) ) {
message("getting cached data")
return(m)
}
## get the matrix from the object
data <- x$get()
## calculating inverse using matrix multiplication
m <- solve(data) %*% data
## set the inverse to the object
x$setInverse(m)
## return the matrix
m
}
